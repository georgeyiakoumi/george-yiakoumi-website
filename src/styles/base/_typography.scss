@use "sass:map";
@use "./scale" as scale;
@use "./breakpoints" as breakpoint;
@use "./colours-semantic" as semantic;


/// Font Families
$font-family-heading: Mulish, sans-serif;
$font-family-body: Mulish, sans-serif;
$font-family-code: 'Roboto Mono', monospace;

/// Font Weights
$font-weight-strong: 600;
$font-weight-weak: 400;

body {
  font-family: $font-family-body;

  code {
    font-family: $font-family-code;
  }
}

// Typography map
$typography: (
  heading-1: (
    small: (font-size: 2.25rem, line-height: 2.75rem),
    desktop: (font-size: 2.5rem, line-height: 3rem)
  ),
  heading-2: (
    small: (font-size: 1.75rem, line-height: 2.25rem),
    desktop: (font-size: 2rem, line-height: 2.5rem)
  ),
  heading-3: (
    desktop: (font-size: 1.5rem, line-height: 2rem)
  ),
  heading-4: (
    desktop: (font-size: 1.25rem, line-height: 1.75rem)
  ),
  heading-5: (
    desktop: (font-size: 2.5rem, line-height: 3rem)
  ),
  heading-6: (
    desktop: (font-size: 2.5rem, line-height: 3rem)
  ),
  paragraph: (
    desktop: (font-size: 1rem, line-height: 1.5rem)
  ),
  text-small: (
    desktop: (font-size: 0.875rem, line-height: 1.25rem)
  ),
  text-uppercase: (
    desktop: (font-size: 0.875rem, line-height: 1.25rem)
  ),
  text-display: (
    small: (font-size: 2.5rem, line-height: 3rem),
    desktop: (font-size: 3.5rem, line-height: 4rem)
  )
);

@function get-typography($key, $breakpoint: desktop, $property: font-size) {
  @return map.get(map.get(map.get($typography, $key), $breakpoint), $property);
}

@mixin responsive-typography($element, $font-family: null, $font-weight: null, $color: null) {
  margin: 0;
  
  @if $font-family != null {
    font-family: $font-family;
  }  

  @if $font-weight != null {
    font-weight: $font-weight;
  }

  @if $color != null {
    color: $color;
  }

  $element-typography: map.get($typography, $element);
  $styles-small: map.get($element-typography, small);
  $styles-desktop: map.get($element-typography, desktop);
  

  @if $styles-small == null {
    font-size: map.get($styles-desktop, font-size);
    line-height: map.get($styles-desktop, line-height);
  } @else {
    font-size: map.get($styles-small, font-size);
    line-height: map.get($styles-small, line-height);
  }

  @media (min-width: map.get(breakpoint.$breakpoints, desktop)) {
    font-size: map.get($styles-desktop, font-size);
    line-height: map.get($styles-desktop, line-height);
  }
}

h1 {
  @include responsive-typography(heading-1, $font-family-heading, $font-weight-strong, semantic.$text-strong);
}

h2 {
  @include responsive-typography(heading-2, $font-family-heading, $font-weight-strong, semantic.$text-strong);
}

h3 {
  @include responsive-typography(heading-3, $font-family-heading, $font-weight-strong, semantic.$text-strong);
}

h4 {
  @include responsive-typography(heading-4, $font-family-heading, $font-weight-strong, semantic.$text-strong);
}

h5 {
  @include responsive-typography(heading-5, $font-family-heading, $font-weight-strong, semantic.$text-strong);
}

h6 {
  @include responsive-typography(heading-6, $font-family-heading, $font-weight-strong, semantic.$text-strong);
}

p {
  @include responsive-typography(paragraph, $font-family-body, $font-weight-weak, semantic.$text-weak);
}

small {
  @include responsive-typography(text-small, $font-family-body, $font-weight-weak, semantic.$text-weak);
}

.large {
  @include responsive-typography(heading-4, $font-family-body, $font-weight-weak, semantic.$text-weak);
}

.uppercase {
  @include responsive-typography(text-uppercase, $font-family-heading, $font-weight-weak, semantic.$text-strong);
  text-transform: uppercase;
}

.display {
  @include responsive-typography(text-display, $font-family-heading, $font-weight-strong, semantic.$text-strong);
}

ul {
  margin: 0;
}

li {
  @include responsive-typography(paragraph);
  padding-bottom: scale.$scale-sm;
}

a {
  color: semantic.$text-brand;
  
  &:hover {
    text-decoration: none;
  }
  
}